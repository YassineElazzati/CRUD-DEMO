# ========================
# Configuration de base
# ========================

# Port sur lequel ce microservice va écouter les requêtes HTTP
# Par défaut, c'est 8080, mais ici on le change en 8081 pour éviter les conflits avec d'autres services.
server.port=8081

# Nom de l'application Spring Boot (affiché dans les logs / utile avec Eureka)
# Ce nom peut être utilisé par des outils comme Eureka pour identifier ce microservice.
spring.application.name=auteur-service

# ================================
# Configuration de la base de données
# ================================

# URL de connexion à la base de données PostgreSQL
# Format : jdbc:postgresql://<host>:<port>/<nom_bdd>
# Ici, on se connecte à une base nommée `auteurdb` sur le port 5433 (celui du container Docker)
spring.datasource.url=jdbc:postgresql://localhost:5433/auteurdb

# Nom d'utilisateur de la base de données
spring.datasource.username=postgres

# Mot de passe associé à l'utilisateur
spring.datasource.password=postgres

# ================================
# ⚙️ Configuration JPA / Hibernate
# ================================

# ddl-auto=update : permet de créer/modifier automatiquement les tables dans la base
# Valeurs possibles :
# - none : ne fait rien
# - create : crée les tables à chaque démarrage (⚠️ supprime les anciennes données)
# - create-drop : crée au démarrage et supprime à l’arrêt
# - update : met à jour les tables sans supprimer les données (utilisé ici)
spring.jpa.hibernate.ddl-auto=update

# Affiche les requêtes SQL générées par Hibernate dans la console (utile pour le debug)
spring.jpa.show-sql=true

# Formate les requêtes SQL affichées pour les rendre plus lisibles dans les logs
spring.jpa.properties.hibernate.format_sql=true
